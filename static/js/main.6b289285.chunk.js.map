{"version":3,"sources":["mock/index.js","components/CategoryFilter.jsx","components/Footer.jsx","components/Header.jsx","components/Pagination.jsx","components/PostList.jsx","components/App.jsx","index.jsx"],"names":["createServer","routes","this","namespace","get","data","CategoryFilter","posts","handleChange","useState","categories","setCategories","useEffect","newCategories","Set","add","forEach","post","category","name","className","id","onChange","map","categoryName","value","Footer","href","Header","Pagination","postsPerPage","totalPosts","paginate","currentPage","pageNumbers","i","Math","ceil","push","anchorClassName","number","onClick","Item","src","author","avatar","slice","indexOf","alt","title","summary","moment","publishDate","format","PostList","App","setPosts","filteredPosts","setFilteredPosts","setCurrentPage","fetch","mode","then","response","json","indexOfLastPost","indexOfFirstPost","currentFilteredPosts","e","target","newFilteredPosts","filter","length","pageNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b289285.chunk.js","sourcesContent":["import { createServer } from 'miragejs';\r\n\r\nimport data from './data.json';\r\n\r\ncreateServer({\r\n  routes() {\r\n    this.namespace = 'api';\r\n\r\n    this.get('/posts', () => {\r\n      return data;\r\n    });\r\n  },\r\n});\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport default function CategoryFilter({ posts, handleChange }) {\r\n  const [categories, setCategories] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // iam am using a set so every value will be unique\r\n    const newCategories = new Set();\r\n    // add Display All option:\r\n    newCategories.add('Display All');\r\n    // create a set of categories, that will be displayed in a drop-down list\r\n    posts.forEach((post) => {\r\n      post.categories.forEach((category) => {\r\n        newCategories.add(category.name);\r\n      });\r\n    });\r\n    setCategories([...newCategories]);\r\n    // add posts dependency in case the posts change\r\n  }, [posts]);\r\n\r\n  if (categories) {\r\n    return (\r\n      <div className=\"CategoryFilter\">\r\n        <p>\r\n          <strong>Add filter: </strong>\r\n        </p>\r\n        <select name=\"categories\" id=\"categories\" onChange={handleChange}>\r\n          {categories.map((categoryName) => (\r\n            <option value={categoryName} key={categoryName}>\r\n              {categoryName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div className=\"loading\">loading</div>;\r\n  }\r\n}\r\n","export default function Footer() {\r\n  return (\r\n    <footer>\r\n      <p>Website made by Hubert Gajewski</p>\r\n      <a href=\"https://github.com/t3t3c\">github Page</a>\r\n    </footer>\r\n  );\r\n}\r\n","export default function Header() {\r\n  return (\r\n    <header>\r\n      <h1>Robots Forum</h1>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate, currentPage }) => {\r\n  const pageNumbers = [];\r\n\r\n  // calculate rounded up number of the pages\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  // add current class to current anchor to style it\r\n  function anchorClassName(number) {\r\n    if (number === currentPage) {\r\n      return 'page-link current';\r\n    } else {\r\n      return 'page-link';\r\n    }\r\n  }\r\n  // show the numbers\r\n  return (\r\n    <nav>\r\n      <ul className=\"Pagination\">\r\n        {pageNumbers.map((number) => (\r\n          <li key={number} className=\"page-item\">\r\n            {/* onClick we change the current page */}\r\n            <a\r\n              onClick={() => paginate(number)}\r\n              href=\"!#\"\r\n              className={anchorClassName(number)}\r\n            >\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","// module for formating dates\r\nimport moment from 'moment';\r\n\r\nfunction Item({ post }) {\r\n  return (\r\n    <article className=\"Item\">\r\n      <img\r\n        // removes the \"?size=50x50&set=set1 from the string\"\r\n        // otherwise the link did not work\r\n        src={post.author.avatar.slice(0, post.author.avatar.indexOf('?'))}\r\n        alt=\"avatar\"\r\n      />\r\n      <div className=\"item-content\">\r\n        <div className=\"title-summary\">\r\n          <h3>{post.title}</h3>\r\n          <p>{post.summary}</p>\r\n        </div>\r\n        <div className=\"author-date\">\r\n          <p>\r\n            <strong>{post.author.name}</strong>\r\n          </p>\r\n          {/* moment formats the date in a \"28th of September 2020\" format*/}\r\n          <p>{moment(post.publishDate).format('Do of MMMM YYYY')}</p>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default function PostList({ posts }) {\r\n  return (\r\n    <div className=\"PostList\">\r\n      {posts.map((post) => (\r\n        <Item key={post.id} post={post} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport CategoryFilter from './CategoryFilter';\r\nimport Footer from './Footer';\r\nimport Header from './Header';\r\nimport Pagination from './Pagination';\r\nimport PostList from './PostList';\r\n\r\nfunction App() {\r\n  const [posts, setPosts] = useState([]);\r\n  // Display All is a default chosen category\r\n  const [filteredPosts, setFilteredPosts] = useState([]);\r\n  // Pagination Setup\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  // 10 posts per page is set as default\r\n  const [postsPerPage] = useState(6);\r\n\r\n  // fetch data from the server\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/api/posts', { mode: 'cors' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setPosts(data.posts);\r\n        setFilteredPosts(data.posts);\r\n      });\r\n  }, []);\r\n\r\n  function handleFilterChange(e) {\r\n    // take the value from the dropdown\r\n    const value = e.target.value;\r\n    if (value === 'Display All') {\r\n      // display all posts\r\n      setFilteredPosts(posts);\r\n    } else {\r\n      const newFilteredPosts = posts.filter((post) => {\r\n        // if there is a category with the same name as chosen one,add the post\r\n        for (const category of post.categories) {\r\n          if (category.name === value) {\r\n            return true;\r\n          }\r\n        }\r\n        // this post did not have that category\r\n        return false;\r\n      });\r\n      // display filtered posts\r\n      setFilteredPosts(newFilteredPosts);\r\n    }\r\n  }\r\n\r\n  // Pagination setup:\r\n  const indexOfLastPost = currentPage * postsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n  // slice the posts we want to show\r\n  const currentFilteredPosts = filteredPosts.slice(\r\n    indexOfFirstPost,\r\n    indexOfLastPost\r\n  );\r\n\r\n  function paginate(pageNumber) {\r\n    setCurrentPage(pageNumber);\r\n  }\r\n\r\n  if (posts) {\r\n    // if posts are finished fetching\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <CategoryFilter posts={posts} handleChange={handleFilterChange} />\r\n        <PostList posts={currentFilteredPosts} />\r\n        <Pagination\r\n          postsPerPage={postsPerPage}\r\n          totalPosts={filteredPosts.length}\r\n          paginate={paginate}\r\n          currentPage={currentPage}\r\n        />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  } else {\r\n    // posts have not finished fetching\r\n    return <div className=\"loading\">Loading</div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n/**\r\n * This file can be ignored, please work in ./components/App.jsx\r\n */\r\n\r\n// Include mock API.\r\nimport './mock';\r\n\r\n// Include styles.\r\nimport './styles/index.css';\r\n\r\n// Include application component.\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}